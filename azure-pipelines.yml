jobs:
- job: TestsAndBuild
  displayName: Run Tests And Build Image

  pool:
    vmImage: 'ubuntu-16.04'

  variables:
  - group: get-help-to-retrain
  - name: postgresImage
    value: postgres:11-alpine
  - name: postgresPassword
    value: test
  - name: postgresDatabaseUrl
    value: postgres://postgres:test@postgres/get-help-to-retrain
  - name: dockerRun
    value: docker run --rm --link $(postgresImage) -e DATABASE_URL=$(postgresDatabaseUrl) -e RAILS_ENV=test -e RACK_ENV=test -e NODE_ENV=test $(dockerRegistry)/$(imageName):$(imageTag)

  steps:
    - script: |
        git_sha=$(git rev-parse --short HEAD)
        echo "##vso[build.updatebuildnumber]$git_sha"
        echo "##vso[task.setvariable variable=ImageTag;]$git_sha"
      displayName: 'Set Image Tags'

    - script: docker login -u $(dockerRegistry) -u $(dockerId) -p $pswd
      env:
        pswd: $(dockerPassword)
      displayName: Docker Login

    - script: |
        docker run --name=postgres -e POSTGRESS_PASSWORD=$(postgresPassword) -d $(postgresImage)
      displayName: Launch Postgres

    - script: |
        docker pull $(dockerRegistry)/$(imageName):latest || true
      displayName: Retrieve latest Docker build to use as cache
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

    - script: |
        docker build -f Dockerfile --cache-from=$(dockerRegistry)/$(imageName):latest -t $(dockerRegistry)/$(imageName):$(imageTag) .
      displayName: Build Docker Image using Cache
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

    - script: |
        docker build -f Dockerfile -t $(dockerRegistry)/$(imageName):$(imageTag) -t $(dockerRegistry)/$(imageName):latest .
      displayName: Build Docker Image without Cache
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

    - script: |
        $DOCKER_RUN bundle exec rake db:create db:test:prepare
      displayName: Database Setup
      env:
        DOCKER_RUN: $(dockerRun)

    - script: |
        $DOCKER_RUN bundle exec govuk-lint-ruby app lib spec
      displayName: GovUK linter
      env:
        DOCKER_RUN: $(dockerRun)

    - script: |
        $DOCKER_RUN bundle exec brakeman
      displayName: Brakeman check
      env:
        DOCKER_RUN: $(dockerRun)

    - script: |
        $DOCKER_RUN bundle exec rspec
      displayName: Rspec
      env:
        DOCKER_RUN: $(dockerRun)

    - script: |
        $DOCKER_RUN bundle exec cucumber
      displayName: Cucumber
      env:
        DOCKER_RUN: $(dockerRun)

    - script: |
        docker push $(dockerRegistry)/$(imageName):$(imageTag)
      displayName: 'Push Docker Image'

    - script: |
        docker push $(dockerRegistry)/$(imageName):latest
      displayName: Push Latest Docker Image
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: |
          azure/**
        TargetFolder: '$(build.artifactstagingdirectory)'
        OverWrite: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'ARMTemplates'
