trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

variables:
  IMAGE_NAME: dfedigital/get-help-to-retrain
  postgresUrl: postgres://test:test@localhost:5432/get-help-to-retrain
  BUNDLE_CACHE_FOLDER: $(Pipeline.Workspace)/vendor/bundle

resources:
  containers:
  - container: 'postgres'
    image: 'postgres:11-alpine'
    ports:
      - 5432:5432/tcp
    env:
      POSTGRES_DB: 'get-help-to-retrain'
      POSTGRES_USER: 'test'
      POSTGRES_PASSWORD: 'test'
  - container: 'selenium'
    image: 'selenium/standalone-chrome:3'
    ports:
      - 4444:4444/tcp
    volumes:
      - /dev/shm:/dev/shm

stages:
- stage: Checks
  displayName: Run Tests

  jobs:
  - job: Tests
    pool:
      vmImage: 'ubuntu-16.04'
    services:
      postgres: postgres
      selenium: selenium

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.14.0'

      - script: |
          gateway_ip=$(docker network inspect bridge --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}')
          echo "##vso[task.setvariable variable=GatewayIP;]$gateway_ip"
          git_sha=$(git rev-parse --short HEAD)
          echo "##vso[build.updatebuildnumber]$git_sha"
        displayName: 'Set Task Variables'

      - script: |
          sudo apt-get update
          sudo apt-get install libpq-dev bison libgdbm-dev libsqlite3-dev libyaml-dev sqlite3 libreadline6-dev libncurses5-dev
          gpg --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
          curl -sSL https://get.rvm.io | bash -s -- --autolibs=read-fail
          source /home/vsts/.rvm/scripts/rvm
          rvm install "ruby-2.6.5"
          rvm --default use ruby-2.6.5
          echo "##vso[task.prependpath]$(HOME)/.rvm/rubies/ruby-2.6.5/bin"
        displayName: 'Install dependencies'

      - task: Cache@2
        inputs:
          key: $(Build.SourcesDirectory)/Gemfile.lock
          path: $(BUNDLE_CACHE_FOLDER)
          cacheHitVar: CACHE_RESTORED_BUNDLE
        displayName: Cache bundle

      - script: |
          gem install bundler
          bundle config --global build.sassc --disable-march-tune-native
          bundle config --global force_ruby_platform true
          bundle install --jobs=4 --retry=3 --path $(BUNDLE_CACHE_FOLDER) --without development
          bundle config --local build.sassc --disable-march-tune-native
        displayName: 'bundle install'

      - script: |
          bundle exec rubocop --format clang
        displayName: 'rubocop'

      - script: |
          bundle exec brakeman
        displayName: 'brakeman'

      - script: |
          bundle exec govuk-lint-sass app/webpacker/styles
        displayName: 'GovUK lint'

      - script: |
          yarn install
        displayName: 'yarn install'

      - script: |
          bundle exec rake db:schema:load
        displayName: 'Database Setup'
        env:
          RAILS_ENV: test
          DATABASE_URL: $(postgresUrl)

      - script: |
          mkdir /build
          chmod 777 /build
          bundle exec rspec --format RspecJunitFormatter --out /build/TEST-rspec.xml
        displayName: 'Run Rspec tests'
        env:
          DATABASE_URL: $(postgresUrl)
          SELENIUM_REMOTE_ADDRESS: $(GatewayIP)

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          searchFolder: /build/
          testResultsFiles: '*.xml'
          failedTaskOnFailedTest: true

- stage: Build
  displayName: Build image

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      - task: Docker@1
        displayName: Docker Hub login
        inputs:
          command: login
          containerregistrytype: Container Registry
          dockerRegistryEndpoint: DFE-Digital Docker Hub

      - script: docker pull $(IMAGE_NAME):latest || true
        displayName: "Pull latest docker image to cache"

      - script: docker pull $(IMAGE_NAME):assets-latest || true
        displayName: "Pull assets latest docker image to cache"

      - task: Docker@1
        displayName: Build docker assets stage
        inputs:
          command: build
          imageName: $(IMAGE_NAME):assets-latest
          dockerFile: Dockerfile
          arguments: '--cache-from $(IMAGE_NAME):assets-latest --target assets'

      - task: Docker@1
        displayName: Build docker image
        inputs:
          command: build
          imageName: $(IMAGE_NAME):$(Build.BuildNumber)
          dockerFile: Dockerfile
          arguments: '--cache-from=$(IMAGE_NAME):assets-latest,$(IMAGE_NAME):latest --build-arg GIT_SHA=$(Build.BuildNumber)'

      - task: Docker@2
        displayName: Push new image with current tag
        inputs:
          command: push
          repository: $(IMAGE_NAME)
          tags: $(Build.BuildNumber)

      - task: Docker@2
        displayName: Push new image with assets tag
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          command: push
          repository: $(IMAGE_NAME)
          tags: assets-latest

      - task: Docker@2
        displayName: Push tagged image (latest) if master
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          command: push
          repository: $(IMAGE_NAME)
          tags: latest

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          Contents: |
            azure/**
          TargetFolder: '$(build.artifactstagingdirectory)'
          OverWrite: true

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact'
        inputs:
          path: '$(build.artifactstagingdirectory)'
          ArtifactName: 'ARMTemplates'

- stage: QADeployment
  displayName: Deployment to QA
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  jobs:
  - template: azure-pipelines-deploy-template.yml
    parameters:
      resourceGroupName: 's108t01-qa'
      environment: 'qa'
      containerImageReference: $(IMAGE_NAME):$(Build.BuildNumber)
      subscriptionServiceConnection: azdo.pipelines.cip.S108T.arm282af598-0480-4a28-ab29-efa10624365a

- stage: SmokeTests
  displayName: 'Smoke tests'
  dependsOn: QADeployment

  jobs:
  - job: SmokeTests
    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      - script: |
          git clone https://github.com/DFE-Digital/get-help-to-retrain-smoke-tests.git
        displayName: Checkout and install test suite

      - task: CmdLine@2
        continueOnError: 'true'
        displayName: Run smoke tests
        inputs:
          script: 'docker run  -v $(Pipeline.Workspace)/s/get-help-to-retrain-smoke-tests:/e2e -w /e2e cypress/included:3.4.1  --spec "cypress/integration/smoke-test.js" --reporter junit'
          workingDirectory: 'get-help-to-retrain-smoke-tests'

      - task: PublishPipelineArtifact@1
        condition: succeededOrFailed()
        displayName: 'Publish Cypress video artifacts'
        inputs:
          path: '$(Pipeline.Workspace)/s/get-help-to-retrain-smoke-tests/cypress/videos'
          ArtifactName: 'Cypress'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: 'junit'
          searchFolder: '$(Pipeline.Workspace)/s/get-help-to-retrain-smoke-tests/results/'
          testResultsFiles: '*.xml'
          failedTaskOnFailedTest: true
