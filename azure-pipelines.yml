trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

variables:
  IMAGE_NAME: '$(dockerHubUserName)/get-help-to-retrain'
  postgresUrl: postgres://test:test@localhost:5432/get-help-to-retrain

resources:
  containers:
  - container: 'postgres'
    image: 'postgres:11-alpine'
    ports:
      - 5432:5432/tcp
    env:
      POSTGRES_DB: 'get-help-to-retrain'
      POSTGRES_USER: 'test'
      POSTGRES_PASSWORD: 'test'

stages:
- stage: Build
  displayName: Build image

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-16.04'

    services:
      postgres: postgres

    steps:
      - script: |
          git_sha=$(git rev-parse --short HEAD)
          echo "##vso[build.updatebuildnumber]$git_sha"
          echo "##vso[task.setvariable variable=ImageTag;]$git_sha"
        displayName: 'Set Image Tags'

      - task: Docker@1
        displayName: Docker Hub login
        inputs:
          command: login
          containerregistrytype: Container Registry
          dockerRegistryEndpoint: DFE-Digital Docker Hub

      - script: docker pull $(IMAGE_NAME):latest || true
        displayName: "Pull latest docker image to cache"

      - task: Docker@1
        displayName: Build docker image
        inputs:
          command: build
          imageName: $(IMAGE_NAME):$(Build.BuildNumber)
          dockerFile: Dockerfile
          arguments: '--cache-from $(IMAGE_NAME):latest'

      - task: Docker@1
        displayName: Run Rubocop
        inputs:
          command: run
          imageName: $(IMAGE_NAME):$(Build.BuildNumber)
          containerCommand: bundle exec rubocop --format clang
          runInBackground: false
          arguments: -e RAILS_ENV=test -e RACK_ENV=test -e NODE_ENV=test

      - task: Docker@1
        displayName: Run Brakeman
        inputs:
          command: Run an image
          imageName: $(IMAGE_NAME):$(Build.BuildNumber)
          containerCommand: bundle exec brakeman
          runInBackground: false
          arguments: -e RAILS_ENV=test -e RACK_ENV=test -e NODE_ENV=test

      - task: Docker@1
        displayName: Run GovUK Sass linter
        inputs:
          command: Run an image
          imageName: $(IMAGE_NAME):$(Build.BuildNumber)
          containerCommand: bundle exec govuk-lint-sass app/webpacker/styles
          runInBackground: false
          arguments: -e RAILS_ENV=test -e RACK_ENV=test -e NODE_ENV=test

      - task: Docker@1
        displayName: Database Setup
        inputs:
          command: run
          imageName: $(IMAGE_NAME):$(Build.BuildNumber)
          containerCommand: bundle exec rake db:create db:test:prepare
          runInBackground: false
          arguments: --net host -e DATABASE_URL=$(postgresUrl) -e RAILS_ENV=test -e RACK_ENV=test -e NODE_ENV=test

      - task: Docker@1
        displayName: Run Rspec tests
        inputs:
          command: Run an image
          imageName: $(IMAGE_NAME):$(Build.BuildNumber)
          volumes: $(Build.SourcesDirectory):/build
          containerCommand: bundle exec rspec --format RspecJunitFormatter --out /build/TEST-rspec.xml
          runInBackground: false
          arguments: --net host -e DATABASE_URL=$(postgresUrl) -e RAILS_ENV=test -e RACK_ENV=test -e NODE_ENV=test

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '*.xml'
          failedTaskOnFailedTest: true

      - task: Docker@2
        displayName: Push new image with current tag
        inputs:
          command: push
          repository: $(IMAGE_NAME)
          tags: $(Build.BuildNumber)

      - task: Docker@2
        displayName: Push tagged image (latest) if master
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          command: push
          repository: $(IMAGE_NAME)
          tags: latest

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          Contents: |
            azure/**
          TargetFolder: '$(build.artifactstagingdirectory)'
          OverWrite: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          ArtifactName: 'ARMTemplates'
